//@version=5
indicator('Multiple Indicators Screener', overlay=false)


////////////
// INPUTS //
tbloc       = input.string("middle_right", title="Table Position", options=["middle_left", "middle_right", "middle_center"])
mtf_val     = input.timeframe(defval="", title="Select a time frame")

// SMA
rsi_len = input.int(  14, title = "RSI Length",     group = "Indicators")
rsi_os  = input.float(30, title = "RSI Overbought", group = "Indicators")
rsi_ob  = input.float(70, title = "RSI Oversold",   group = "Indicators")

// TSI
tsi_long_len = input.int(   25, title = "TSI Long Length",   group = "Indicators")
tsi_shrt_len = input.int(   13, title = "TSI Short Length",  group = "Indicators")
tsi_ob       = input.float( 30, title = "TSI Overbought",    group = 'Indicators')
tsi_os       = input.float(-30, title = "TSI Oversold",      group = 'Indicators')

// ADX Params
adx_smooth   = input.int(  14, title = "ADX Smoothing",     group = 'Indicators')
adx_dilen    = input.int(  14, title = "ADX DI Length",     group = 'Indicators')
adx_level    = input.float(40, title = "ADX Level",         group = 'Indicators')

// EMA
len0 = input.int(1, minval=1, title="MA1",     group = 'Indicators')
len1 = input.int(8, minval=1, title="MA1",     group = 'Indicators')
len2 = input.int(13, minval=1, title="MA2",    group = 'Indicators')
len3 = input.int(21, minval=1, title="MA3",    group = 'Indicators')
len4 = input.int(55, minval=1, title="MA4",    group = 'Indicators')
len5 = input.int(200, minval=1, title="MA5",   group = 'Indicators')
len6 = input.int(100, minval=1, title="MA5",   group = 'Indicators')

// SuperTrend
sup_atr_len = input.int(   10, "Supertrend ATR Length", group = 'Indicators')
sup_factor  = input.float(3.0, "Supertrend Factor",     group = 'Indicators')

// ROC
roc_len = input.int(  150, title = "ROC Length",     group = "Indicators")

// BB and MA
length1 = input.int(title="1st Length", minval=1, defval=120)
length2 = input.int(title="2nd Length", minval=1, defval=12)
maInput = input(title="MA Type", defval="EMA") //, options=["EMA", "SMA", "VWMA", "WMA"])
src = input(title="Source", defval=hl2)

// macd
fastLength = input.int(12, minval=1), slowLength=input.int(26,minval=1)
signalLength=input.int(9,minval=1)

//trend inputs
source      = input(close)
length      = input.int(defval=100, minval=1)
offset      = input.int(defval=0, minval=0)
dev         = input.float(defval=2.0, minval=1, title="Deviation")
smoothing   = input.int(defval=1, minval=1)
//mtf_val     = input.float("", title="Resolution", input.resolution)

line_thick  = input.int(defval=1, title="S&R Thickness", minval=1, maxval=4)
signals     = input.string("Recent", "Signals Display", options=["Recent", "All"])
p           = input.string("Lime", "Up Color", options=["Red", "Lime", "Orange", "Teal", "Yellow", "White", "Black"])
q           = input.string("Red", "Down Color", options=["Red", "Lime", "Orange", "Teal", "Yellow", "White", "Black"])
goto        = input.int(defval=0, title="End At Bar Index")

//BB
srchull       = input(hl2,   "Price Data")
lengthhull    = input(24,    "Lookback")
showcross = input(true,  "Show cross over/under")
gain      = input(10000, "Gain")
k         = input(true,  "Use Kahlman") 



/////////////
// SYMBOLS // 

u01 = input.bool(true,  title = "", group = 'Symbols', inline = 's01')
u02 = input.bool(true,  title = "", group = 'Symbols', inline = 's02')
u03 = input.bool(true,  title = "", group = 'Symbols', inline = 's03')
u04 = input.bool(true,  title = "", group = 'Symbols', inline = 's04')
u05 = input.bool(true,  title = "", group = 'Symbols', inline = 's05')
u06 = input.bool(true,  title = "", group = 'Symbols', inline = 's06')
u07 = input.bool(true,  title = "", group = 'Symbols', inline = 's07')
u08 = input.bool(true,  title = "", group = 'Symbols', inline = 's08')
u09 = input.bool(true,  title = "", group = 'Symbols', inline = 's09')
u10 = input.bool(true,  title = "", group = 'Symbols', inline = 's10')
u11 = input.bool(true,  title = "", group = 'Symbols', inline = 's11')
u12 = input.bool(true,  title = "", group = 'Symbols', inline = 's12')
u13 = input.bool(true,  title = "", group = 'Symbols', inline = 's13')
u14 = input.bool(true,  title = "", group = 'Symbols', inline = 's14')
u15 = input.bool(true,  title = "", group = 'Symbols', inline = 's15')
u16 = input.bool(true,  title = "", group = 'Symbols', inline = 's16')
u17 = input.bool(true,  title = "", group = 'Symbols', inline = 's17')
u18 = input.bool(true,  title = "", group = 'Symbols', inline = 's18')
u19 = input.bool(true,  title = "", group = 'Symbols', inline = 's19')
u20 = input.bool(true,  title = "", group = 'Symbols', inline = 's20')
u21 = input.bool(true,  title = "", group = 'Symbols', inline = 's21')
u22 = input.bool(true,  title = "", group = 'Symbols', inline = 's22')
u23 = input.bool(true,  title = "", group = 'Symbols', inline = 's23')
u24 = input.bool(true,  title = "", group = 'Symbols', inline = 's24')
u25 = input.bool(true,  title = "", group = 'Symbols', inline = 's25')
u26 = input.bool(true,  title = "", group = 'Symbols', inline = 's26')
u27 = input.bool(true,  title = "", group = 'Symbols', inline = 's27')
u28 = input.bool(true,  title = "", group = 'Symbols', inline = 's28')
u29 = input.bool(true,  title = "", group = 'Symbols', inline = 's29')
u30 = input.bool(true,  title = "", group = 'Symbols', inline = 's30')
u31 = input.bool(true,  title = "", group = 'Symbols', inline = 's31')
u32 = input.bool(true,  title = "", group = 'Symbols', inline = 's32')
u33 = input.bool(true,  title = "", group = 'Symbols', inline = 's33')
u34 = input.bool(true,  title = "", group = 'Symbols', inline = 's34')
u35 = input.bool(true,  title = "", group = 'Symbols', inline = 's35')


s01 = input.symbol('BYBIT:BTCUSDT',  group = 'Symbols', inline = 's01')
s02 = input.symbol('BYBIT:ETHUSDT',  group = 'Symbols', inline = 's02')
s03 = input.symbol('BYBIT:RUNEUSDT', group = 'Symbols', inline = 's03')
s04 = input.symbol('BYBIT:SOLUSDT',  group = 'Symbols', inline = 's04')
s05 = input.symbol('BYBIT:GALAUSDT',  group = 'Symbols', inline = 's05')
s06 = input.symbol('BYBIT:SLPUSDT',  group = 'Symbols', inline = 's06')
s07 = input.symbol('BYBIT:SANDUSDT',   group = 'Symbols', inline = 's07')
s08 = input.symbol('BYBIT:LUNAUSDT',  group = 'Symbols', inline = 's08')
s09 = input.symbol('BYBIT:MATICUSDT',  group = 'Symbols', inline = 's09')
s10 = input.symbol('BYBIT:AVAXUSDT',  group = 'Symbols', inline = 's10')
s11 = input.symbol('BYBIT:ADAUSDT',  group = 'Symbols', inline = 's11')
s12 = input.symbol('BYBIT:LOOKSUSDT',  group = 'Symbols', inline = 's12')
s13 = input.symbol('BYBIT:FTMUSDT',  group = 'Symbols', inline = 's13')
s14 = input.symbol('BYBIT:NEARUSDT',   group = 'Symbols', inline = 's14')
s15 = input.symbol('BYBIT:STORJUSDT',   group = 'Symbols', inline = 's15')
s16 = input.symbol('BYBIT:ATOMUSDT',  group = 'Symbols', inline = 's16')
s17 = input.symbol('BYBIT:MANAUSDT',  group = 'Symbols', inline = 's17')
s18 = input.symbol('BYBIT:AXSUSDT',  group = 'Symbols', inline = 's18')
s19 = input.symbol('BYBIT:BITUSDT',  group = 'Symbols', inline = 's19')
s20 = input.symbol('BYBIT:BNBUSDT',  group = 'Symbols', inline = 's20')
s21 = input.symbol('BYBIT:DOGEUSDT',  group = 'Symbols', inline = 's21')
s22 = input.symbol('BYBIT:DOTUSDT',  group = 'Symbols', inline = 's22')
s23 = input.symbol('BYBIT:LINKUSDT',  group = 'Symbols', inline = 's23')
s24 = input.symbol('BYBIT:PEOPLEUSDT',   group = 'Symbols', inline = 's24')
s25 = input.symbol('BYBIT:LTCUSDT', group = 'Symbols', inline = 's25')
s26 = input.symbol('BYBIT:THETAUSDT',  group = 'Symbols', inline = 's26')
s27 = input.symbol('BYBIT:EGLDUSDT', group = 'Symbols', inline = 's27')
s28 = input.symbol('BYBIT:CROUSDT',   group = 'Symbols', inline = 's28')
s29 = input.symbol('BYBIT:XTZUSDT', group = 'Symbols', inline = 's29')
s30 = input.symbol('BYBIT:DYDXUSDT',   group = 'Symbols', inline = 's30')
s31 = input.symbol('BYBIT:HBARUSDT',  group = 'Symbols', inline = 's31')
s32 = input.symbol('BYBIT:CRVUSDT',  group = 'Symbols', inline = 's32')
s33 = input.symbol('BYBIT:LRCUSDT',  group = 'Symbols', inline = 's33')
s34 = input.symbol('BYBIT:ALICEUSDT',  group = 'Symbols', inline = 's34')
s35 = input.symbol('BYBIT:ICPUSDT',  group = 'Symbols', inline = 's35')


//////////////////
// CALCULATIONS //

// Get only symbol
only_symbol(s) => 
    array.get(str.split(s, ":"), 1)
    // BB CROSS
   
hma(_srchull, _lengthhull) =>
    ta.ema((2 * ta.ema(_srchull, _lengthhull / 2)) - ta.ema(_srchull, _lengthhull), math.round(math.sqrt(_lengthhull)))

hma3(_srchull, _lengthhull) =>
    p = lengthhull/2
    ta.ema(ta.ema(close,p/3)*3 - ta.ema(close,p/2) - ta.ema(close,p),p)

kahlman(x, g) =>
    kf = 0.0
    dk = x - nz(kf[1], x)
    smooth = nz(kf[1],x)+dk*math.sqrt((g/10000)*2)
    velo = 0.0
    velo := nz(velo[1],0) + ((g/10000)*dk)
    kf := smooth+velo
    
a = k ? kahlman(hma(srchull, lengthhull), gain) : hma(srchull, lengthhull)
b = k ? kahlman(hma3(srchull, lengthhull), gain) : hma3(srchull, lengthhull)
c = b > a ? color.lime : color.red
signal = b > a 
crossdn = a > b and a[1] < b[1]
crossup = b > a and b[1] < a[1]

//MACD Cal

fastMA = ta.ema(source, fastLength)
slowMA = ta.ema(source, slowLength)
macd = fastMA - slowMA
signal_m = ta.sma(macd, signalLength)
hist = macd - signal_m
macd_s = bool(na)
macd_s := macd > 0 and signal_m > 0

// Trend Cal
cc(x) => x=="Red"?color.red:x=="Lime"?color.lime:x=="Orange"?color.orange:x=="Teal"?
 color.teal:x=="Yellow"?color.yellow:x=="Black"?color.black:color.white
//data(x) => ta.sma(request.security(syminfo.tickerid, mtf_val!="" ? mtf_val : timeframe.period, x), smoothing)
data(x) => ta.sma(source, smoothing)

linreg = data(ta.linreg(source, length, offset))
linreg_p = data(ta.linreg(source, length, offset+1))
//plot(linreg, "Regression Line", cc(linreg>linreg[1]?p:q), editable=false)

x = bar_index
slope = linreg - linreg_p
intercept = linreg - x*slope
deviationSum = 0.0
for i=0 to length-1
    deviationSum:= deviationSum + math.pow(source[i]-(slope*(x-i)+intercept), 2)  
deviation = math.sqrt(deviationSum/(length))
x1 = x-length
x2 = x
y1 = slope*(x-length)+intercept
y2 = linreg
// trend logic
//trend_dn = bool(na)
//trend_up = bool(na)
//trend_up := slope > 0 
//trend_dn := slope < 0


// for TSI
double_smooth(src, long, short) =>
	fist_smooth = ta.ema(src, long)
	ta.ema(fist_smooth, short)

// ADX
dirmov(len) =>
	up   =  ta.change(high)
	down = -ta.change(low)
	
	plusDM  = na(up)   ? na : (up > down and up > 0   ? up   : 0)
	minusDM = na(down) ? na : (down > up and down > 0 ? down : 0)
	
	truerange = ta.rma(ta.tr, len)
	
	plus  = fixnan(100 * ta.rma(plusDM, len)  / truerange)
	minus = fixnan(100 * ta.rma(minusDM, len) / truerange)
	
	[plus, minus]
	
adx_func(dilen, adxlen) =>
	[plus, minus] = dirmov(dilen)
	sum = plus + minus
	adx = 100 * ta.rma(math.abs(plus - minus) / (sum == 0 ? 1 : sum), adxlen)

screener_func() =>
    
   
    // TSI
    pc = ta.change(close)

    double_smoothed_pc     = double_smooth(pc,           tsi_long_len, tsi_shrt_len)
    double_smoothed_abs_pc = double_smooth(math.abs(pc), tsi_long_len, tsi_shrt_len)
    
    tsi = 100 * (double_smoothed_pc / double_smoothed_abs_pc)
    
    // ADX 
    //adx = adx_func(adx_dilen, adx_smooth)
    
    // Supertrend
    //[sup_value, sup_dir] = ta.supertrend(sup_factor, sup_atr_len)

	// ROC
	roc = ta.roc(close, roc_len)
	roc_bool = bool(na)
	roc_bool := roc < 1

    
    // EMA Bool
    ema = ta.ema(close, len1)
    //ma1 = y1
    //ma2 = y2
	ma0 = ta.ema(close, len0)
	ma1 = ta.ema(close, len1)
	ma2 = ta.ema(close, len2)
	ma3 = ta.ema(close, len3)
	ma4 = ta.ema(close, len4)
	ma5 = ta.ema(close, len5)
	ma6 = ta.ema(close, len6)

	prelong = bool(na)
	longCond = bool(na)
	shortCond = bool(na)
	longCond := ma1 > ma4 and ma2 > ma4 and ma3 > ma4 and roc > 0
	shortCond :=  ma1 < ma4 and ma2 < ma4 and ma3 < ma4
	prelong := ma1 < ma3 and ma1 > ma4

	CondIni = 0
	CondIni := longCond ? -1 : shortCond ? 1 : CondIni[1]
	CondIniW = 0
	CondIniW := prelong ? -1 : longCond ? -1 : shortCond ? -1 : CondIniW[1]
	BLtrig = longCond and CondIni[1] == -1
	BStrig = shortCond and CondIni[1] == 1
	SLtrig = prelong and CondIniW[1] == -1
	
	macd_b = bool(na)
    macd_b := macd > 0 and signal_m > 0

    trend_up = bool(na)
    trend_up := ma0 > ma6

    //Trigger
    trigs = bool(na)
    //sup = bool(na)
    //sup = 3
    //sup = (macd_b == bool(false) and trend_up == bool(true)  and signal == bool(true))      ? 1 : 3
    sup = if (macd_b == bool(false) and trend_up == bool(true)  and signal == bool(true))
        1
    else if (macd_b == bool(true) and trend_up == bool(false)  and signal == bool(false)) 
        2
    else
        3
        //sup := (macd_b == bool(true) and trend_up == bool(false)  and signal == bool(false))    ? 2 : 3
    //trend_up_col  = array.get(trend_up_arr, i) == bool(true) ? color.green : color.red
    
    trigs := macd_b == bool(true) and trend_up == bool(false)  and signal == bool(false) 



	// Write to Table
    [math.round_to_mintick(close), macd_b, trend_up, ma1, ma2, ma3, ma4, BLtrig, SLtrig, signal, sup]
   


 
// Security call
[cl01, macd_b01, trend_up01, ma101, ma201, ma301, ma401, BLtrig01, SLtrig01, signal01, sup01] = request.security(s01, mtf_val!="" ? mtf_val : timeframe.period, screener_func())
[cl02, macd_b02, trend_up02, ma102, ma202, ma302, ma402, BLtrig02, SLtrig02, signal02, sup02] = request.security(s02, mtf_val!="" ? mtf_val : timeframe.period, screener_func())
[cl03, macd_b03, trend_up03, ma103, ma203, ma303, ma403, BLtrig03, SLtrig03, signal03, sup03] = request.security(s03, mtf_val!="" ? mtf_val : timeframe.period, screener_func())
[cl04, macd_b04, trend_up04, ma104, ma204, ma304, ma404, BLtrig04, SLtrig04, signal04, sup04] = request.security(s04, mtf_val!="" ? mtf_val : timeframe.period, screener_func())
[cl05, macd_b05, trend_up05, ma105, ma205, ma305, ma405, BLtrig05, SLtrig05, signal05, sup05] = request.security(s05, mtf_val!="" ? mtf_val : timeframe.period, screener_func())
[cl06, macd_b06, trend_up06, ma106, ma206, ma306, ma406, BLtrig06, SLtrig06, signal06, sup06] = request.security(s06, mtf_val!="" ? mtf_val : timeframe.period, screener_func())
[cl07, macd_b07, trend_up07, ma107, ma207, ma307, ma407, BLtrig07, SLtrig07, signal07, sup07] = request.security(s07, mtf_val!="" ? mtf_val : timeframe.period, screener_func())
[cl08, macd_b08, trend_up08, ma108, ma208, ma308, ma408, BLtrig08, SLtrig08, signal08, sup08] = request.security(s08, mtf_val!="" ? mtf_val : timeframe.period, screener_func())
[cl09, macd_b09, trend_up09, ma109, ma209, ma309, ma409, BLtrig09, SLtrig09, signal09, sup09] = request.security(s09, mtf_val!="" ? mtf_val : timeframe.period, screener_func())
[cl10, macd_b10, trend_up10, ma110, ma210, ma310, ma410, BLtrig10, SLtrig10, signal10, sup10] = request.security(s10, mtf_val!="" ? mtf_val : timeframe.period, screener_func())
[cl11, macd_b11, trend_up11, ma111, ma211, ma311, ma411, BLtrig11, SLtrig11, signal11, sup11] = request.security(s11, mtf_val!="" ? mtf_val : timeframe.period, screener_func())
[cl12, macd_b12, trend_up12, ma112, ma212, ma312, ma412, BLtrig12, SLtrig12, signal12, sup12] = request.security(s12, mtf_val!="" ? mtf_val : timeframe.period, screener_func())
[cl13, macd_b13, trend_up13, ma113, ma213, ma313, ma413, BLtrig13, SLtrig13, signal13, sup13] = request.security(s13, mtf_val!="" ? mtf_val : timeframe.period, screener_func())
[cl14, macd_b14, trend_up14, ma114, ma214, ma314, ma414, BLtrig14, SLtrig14, signal14, sup14] = request.security(s14, mtf_val!="" ? mtf_val : timeframe.period, screener_func())
[cl15, macd_b15, trend_up15, ma115, ma215, ma315, ma415, BLtrig15, SLtrig15, signal15, sup15] = request.security(s15, mtf_val!="" ? mtf_val : timeframe.period, screener_func())
[cl16, macd_b16, trend_up16, ma116, ma216, ma316, ma416, BLtrig16, SLtrig16, signal16, sup16] = request.security(s16, mtf_val!="" ? mtf_val : timeframe.period, screener_func())
[cl17, macd_b17, trend_up17, ma117, ma217, ma317, ma417, BLtrig17, SLtrig17, signal17, sup17] = request.security(s17, mtf_val!="" ? mtf_val : timeframe.period, screener_func())
[cl18, macd_b18, trend_up18, ma118, ma218, ma318, ma418, BLtrig18, SLtrig18, signal18, sup18] = request.security(s18, mtf_val!="" ? mtf_val : timeframe.period, screener_func())
[cl19, macd_b19, trend_up19, ma119, ma219, ma319, ma419, BLtrig19, SLtrig19, signal19, sup19] = request.security(s19, mtf_val!="" ? mtf_val : timeframe.period, screener_func())
[cl20, macd_b20, trend_up20, ma120, ma220, ma320, ma420, BLtrig20, SLtrig20, signal20, sup20] = request.security(s20, mtf_val!="" ? mtf_val : timeframe.period, screener_func())
[cl21, macd_b21, trend_up21, ma121, ma221, ma321, ma421, BLtrig21, SLtrig21, signal21, sup21] = request.security(s21, mtf_val!="" ? mtf_val : timeframe.period, screener_func())
[cl22, macd_b22, trend_up22, ma122, ma222, ma322, ma422, BLtrig22, SLtrig22, signal22, sup22] = request.security(s22, mtf_val!="" ? mtf_val : timeframe.period, screener_func())
[cl23, macd_b23, trend_up23, ma123, ma223, ma323, ma423, BLtrig23, SLtrig23, signal23, sup23] = request.security(s23, mtf_val!="" ? mtf_val : timeframe.period, screener_func())
[cl24, macd_b24, trend_up24, ma124, ma224, ma324, ma424, BLtrig24, SLtrig24, signal24, sup24] = request.security(s24, mtf_val!="" ? mtf_val : timeframe.period, screener_func())
[cl25, macd_b25, trend_up25, ma125, ma225, ma325, ma425, BLtrig25, SLtrig25, signal25, sup25] = request.security(s25, mtf_val!="" ? mtf_val : timeframe.period, screener_func())
[cl26, macd_b26, trend_up26, ma126, ma226, ma326, ma426, BLtrig26, SLtrig26, signal26, sup26] = request.security(s26, mtf_val!="" ? mtf_val : timeframe.period, screener_func())
[cl27, macd_b27, trend_up27, ma127, ma227, ma327, ma427, BLtrig27, SLtrig27, signal27, sup27] = request.security(s27, mtf_val!="" ? mtf_val : timeframe.period, screener_func())
[cl28, macd_b28, trend_up28, ma128, ma228, ma328, ma428, BLtrig28, SLtrig28, signal28, sup28] = request.security(s28, mtf_val!="" ? mtf_val : timeframe.period, screener_func())
[cl29, macd_b29, trend_up29, ma129, ma229, ma329, ma429, BLtrig29, SLtrig29, signal29, sup29] = request.security(s29, mtf_val!="" ? mtf_val : timeframe.period, screener_func())
[cl30, macd_b30, trend_up30, ma130, ma230, ma330, ma430, BLtrig30, SLtrig30, signal30, sup30] = request.security(s30, mtf_val!="" ? mtf_val : timeframe.period, screener_func())
[cl31, macd_b31, trend_up31, ma131, ma231, ma331, ma431, BLtrig31, SLtrig31, signal31, sup31] = request.security(s31, mtf_val!="" ? mtf_val : timeframe.period, screener_func())
[cl32, macd_b32, trend_up32, ma132, ma232, ma332, ma432, BLtrig32, SLtrig32, signal32, sup32] = request.security(s32, mtf_val!="" ? mtf_val : timeframe.period, screener_func())
[cl33, macd_b33, trend_up33, ma133, ma233, ma333, ma433, BLtrig33, SLtrig33, signal33, sup33] = request.security(s33, mtf_val!="" ? mtf_val : timeframe.period, screener_func())
[cl34, macd_b34, trend_up34, ma134, ma234, ma334, ma434, BLtrig34, SLtrig34, signal34, sup34] = request.security(s34, mtf_val!="" ? mtf_val : timeframe.period, screener_func())
[cl35, macd_b35, trend_up35, ma135, ma235, ma335, ma435, BLtrig35, SLtrig35, signal35, sup35] = request.security(s35, mtf_val!="" ? mtf_val : timeframe.period, screener_func())

////////////
// ARRAYS //

s_arr   = array.new_string(0)
u_arr   = array.new_bool(0)
cl_arr  = array.new_float(0)
macd_b_arr = array.new_bool(0)
signal_arr = array.new_bool(0)
adx_arr = array.new_float(0)
sup_arr = array.new_int(0)
BLtrig_arr = array.new_bool(0)
SLtrig_arr = array.new_bool(0)
ma1_arr = array.new_float(0)
ma2_arr = array.new_float(0)
ma3_arr = array.new_float(0)
ma4_arr = array.new_float(0)
trend_up_arr = array.new_bool(0)

// Add Symbols 
array.push(s_arr, only_symbol(s01))
array.push(s_arr, only_symbol(s02))
array.push(s_arr, only_symbol(s03))
array.push(s_arr, only_symbol(s04))
array.push(s_arr, only_symbol(s05))
array.push(s_arr, only_symbol(s06))
array.push(s_arr, only_symbol(s07))
array.push(s_arr, only_symbol(s08))
array.push(s_arr, only_symbol(s09))
array.push(s_arr, only_symbol(s10))
array.push(s_arr, only_symbol(s11))
array.push(s_arr, only_symbol(s12))
array.push(s_arr, only_symbol(s13))
array.push(s_arr, only_symbol(s14))
array.push(s_arr, only_symbol(s15))
array.push(s_arr, only_symbol(s16))
array.push(s_arr, only_symbol(s17))
array.push(s_arr, only_symbol(s18))
array.push(s_arr, only_symbol(s19))
array.push(s_arr, only_symbol(s20))
array.push(s_arr, only_symbol(s21))
array.push(s_arr, only_symbol(s22))
array.push(s_arr, only_symbol(s23))
array.push(s_arr, only_symbol(s24))
array.push(s_arr, only_symbol(s25))
array.push(s_arr, only_symbol(s26))
array.push(s_arr, only_symbol(s27))
array.push(s_arr, only_symbol(s28))
array.push(s_arr, only_symbol(s29))
array.push(s_arr, only_symbol(s30))
array.push(s_arr, only_symbol(s31))
array.push(s_arr, only_symbol(s32))
array.push(s_arr, only_symbol(s33))
array.push(s_arr, only_symbol(s34))
array.push(s_arr, only_symbol(s35))


///////////
// FLAGS //

array.push(u_arr, u01)
array.push(u_arr, u02)
array.push(u_arr, u03)
array.push(u_arr, u04)
array.push(u_arr, u05)
array.push(u_arr, u06)
array.push(u_arr, u07)
array.push(u_arr, u08)
array.push(u_arr, u09)
array.push(u_arr, u10)
array.push(u_arr, u11)
array.push(u_arr, u12)
array.push(u_arr, u13)
array.push(u_arr, u14)
array.push(u_arr, u15)
array.push(u_arr, u16)
array.push(u_arr, u17)
array.push(u_arr, u18)
array.push(u_arr, u19)
array.push(u_arr, u20)
array.push(u_arr, u21)
array.push(u_arr, u22)
array.push(u_arr, u23)
array.push(u_arr, u24)
array.push(u_arr, u25)
array.push(u_arr, u26)
array.push(u_arr, u27)
array.push(u_arr, u28)
array.push(u_arr, u29)
array.push(u_arr, u30)
array.push(u_arr, u31)
array.push(u_arr, u32)
array.push(u_arr, u33)
array.push(u_arr, u34)
array.push(u_arr, u35)


///////////
// CLOSE //

array.push(cl_arr, cl01)
array.push(cl_arr, cl02)
array.push(cl_arr, cl03)
array.push(cl_arr, cl04)
array.push(cl_arr, cl05)
array.push(cl_arr, cl06)
array.push(cl_arr, cl07)
array.push(cl_arr, cl08)
array.push(cl_arr, cl09)
array.push(cl_arr, cl10)
array.push(cl_arr, cl11)
array.push(cl_arr, cl12)
array.push(cl_arr, cl13)
array.push(cl_arr, cl14)
array.push(cl_arr, cl15)
array.push(cl_arr, cl16)
array.push(cl_arr, cl17)
array.push(cl_arr, cl18)
array.push(cl_arr, cl19)
array.push(cl_arr, cl20)
array.push(cl_arr, cl21)
array.push(cl_arr, cl22)
array.push(cl_arr, cl23)
array.push(cl_arr, cl24)
array.push(cl_arr, cl25)
array.push(cl_arr, cl26)
array.push(cl_arr, cl27)
array.push(cl_arr, cl28)
array.push(cl_arr, cl29)
array.push(cl_arr, cl30)
array.push(cl_arr, cl31)
array.push(cl_arr, cl32)
array.push(cl_arr, cl33)
array.push(cl_arr, cl34)
array.push(cl_arr, cl35)


/////////
// MACD //

array.push(macd_b_arr, macd_b01)
array.push(macd_b_arr, macd_b02)
array.push(macd_b_arr, macd_b03)
array.push(macd_b_arr, macd_b04)
array.push(macd_b_arr, macd_b05)
array.push(macd_b_arr, macd_b06)
array.push(macd_b_arr, macd_b07)
array.push(macd_b_arr, macd_b08)
array.push(macd_b_arr, macd_b09)
array.push(macd_b_arr, macd_b10)
array.push(macd_b_arr, macd_b11)
array.push(macd_b_arr, macd_b12)
array.push(macd_b_arr, macd_b13)
array.push(macd_b_arr, macd_b14)
array.push(macd_b_arr, macd_b15)
array.push(macd_b_arr, macd_b16)
array.push(macd_b_arr, macd_b17)
array.push(macd_b_arr, macd_b18)
array.push(macd_b_arr, macd_b19)
array.push(macd_b_arr, macd_b20)
array.push(macd_b_arr, macd_b21)
array.push(macd_b_arr, macd_b22)
array.push(macd_b_arr, macd_b23)
array.push(macd_b_arr, macd_b24)
array.push(macd_b_arr, macd_b25)
array.push(macd_b_arr, macd_b26)
array.push(macd_b_arr, macd_b27)
array.push(macd_b_arr, macd_b28)
array.push(macd_b_arr, macd_b29)
array.push(macd_b_arr, macd_b30)
array.push(macd_b_arr, macd_b31)
array.push(macd_b_arr, macd_b32)
array.push(macd_b_arr, macd_b33)
array.push(macd_b_arr, macd_b34)
array.push(macd_b_arr, macd_b35)


/////////
// Trend //

array.push(trend_up_arr, trend_up01)
array.push(trend_up_arr, trend_up02)
array.push(trend_up_arr, trend_up03)
array.push(trend_up_arr, trend_up04)
array.push(trend_up_arr, trend_up05)
array.push(trend_up_arr, trend_up06)
array.push(trend_up_arr, trend_up07)
array.push(trend_up_arr, trend_up08)
array.push(trend_up_arr, trend_up09)
array.push(trend_up_arr, trend_up10)
array.push(trend_up_arr, trend_up11)
array.push(trend_up_arr, trend_up12)
array.push(trend_up_arr, trend_up13)
array.push(trend_up_arr, trend_up14)
array.push(trend_up_arr, trend_up15)
array.push(trend_up_arr, trend_up16)
array.push(trend_up_arr, trend_up17)
array.push(trend_up_arr, trend_up18)
array.push(trend_up_arr, trend_up19)
array.push(trend_up_arr, trend_up20)
array.push(trend_up_arr, trend_up21)
array.push(trend_up_arr, trend_up22)
array.push(trend_up_arr, trend_up23)
array.push(trend_up_arr, trend_up24)
array.push(trend_up_arr, trend_up25)
array.push(trend_up_arr, trend_up26)
array.push(trend_up_arr, trend_up27)
array.push(trend_up_arr, trend_up28)
array.push(trend_up_arr, trend_up29)
array.push(trend_up_arr, trend_up30)
array.push(trend_up_arr, trend_up31)
array.push(trend_up_arr, trend_up32)
array.push(trend_up_arr, trend_up33)
array.push(trend_up_arr, trend_up34)
array.push(trend_up_arr, trend_up35)


/////////
// SIGNAL //

array.push(signal_arr, signal01)
array.push(signal_arr, signal02)
array.push(signal_arr, signal03)
array.push(signal_arr, signal04)
array.push(signal_arr, signal05)
array.push(signal_arr, signal06)
array.push(signal_arr, signal07)
array.push(signal_arr, signal08)
array.push(signal_arr, signal09)
array.push(signal_arr, signal10)
array.push(signal_arr, signal11)
array.push(signal_arr, signal12)
array.push(signal_arr, signal13)
array.push(signal_arr, signal14)
array.push(signal_arr, signal15)
array.push(signal_arr, signal16)
array.push(signal_arr, signal17)
array.push(signal_arr, signal18)
array.push(signal_arr, signal19)
array.push(signal_arr, signal20)
array.push(signal_arr, signal21)
array.push(signal_arr, signal22)
array.push(signal_arr, signal23)
array.push(signal_arr, signal24)
array.push(signal_arr, signal25)
array.push(signal_arr, signal26)
array.push(signal_arr, signal27)
array.push(signal_arr, signal28)
array.push(signal_arr, signal29)
array.push(signal_arr, signal30)
array.push(signal_arr, signal31)
array.push(signal_arr, signal32)
array.push(signal_arr, signal33)
array.push(signal_arr, signal34)
array.push(signal_arr, signal35)



////////////////
// SUPERTREND //

array.push(sup_arr, sup01)
array.push(sup_arr, sup02)
array.push(sup_arr, sup03)
array.push(sup_arr, sup04)
array.push(sup_arr, sup05)
array.push(sup_arr, sup06)
array.push(sup_arr, sup07)
array.push(sup_arr, sup08)
array.push(sup_arr, sup09)
array.push(sup_arr, sup10)
array.push(sup_arr, sup11)
array.push(sup_arr, sup12)
array.push(sup_arr, sup13)
array.push(sup_arr, sup14)
array.push(sup_arr, sup15)
array.push(sup_arr, sup16)
array.push(sup_arr, sup17)
array.push(sup_arr, sup18)
array.push(sup_arr, sup19)
array.push(sup_arr, sup20)
array.push(sup_arr, sup21)
array.push(sup_arr, sup22)
array.push(sup_arr, sup23)
array.push(sup_arr, sup24)
array.push(sup_arr, sup25)
array.push(sup_arr, sup26)
array.push(sup_arr, sup27)
array.push(sup_arr, sup28)
array.push(sup_arr, sup29)
array.push(sup_arr, sup30)
array.push(sup_arr, sup31)
array.push(sup_arr, sup32)
array.push(sup_arr, sup33)
array.push(sup_arr, sup34)
array.push(sup_arr, sup35)



////BLtrig //

array.push(BLtrig_arr, BLtrig01)
array.push(BLtrig_arr, BLtrig02)
array.push(BLtrig_arr, BLtrig03)
array.push(BLtrig_arr, BLtrig04)
array.push(BLtrig_arr, BLtrig05)
array.push(BLtrig_arr, BLtrig06)
array.push(BLtrig_arr, BLtrig07)
array.push(BLtrig_arr, BLtrig08)
array.push(BLtrig_arr, BLtrig09)
array.push(BLtrig_arr, BLtrig10)
array.push(BLtrig_arr, BLtrig11)
array.push(BLtrig_arr, BLtrig12)
array.push(BLtrig_arr, BLtrig13)
array.push(BLtrig_arr, BLtrig14)
array.push(BLtrig_arr, BLtrig15)
array.push(BLtrig_arr, BLtrig16)
array.push(BLtrig_arr, BLtrig17)
array.push(BLtrig_arr, BLtrig18)
array.push(BLtrig_arr, BLtrig19)
array.push(BLtrig_arr, BLtrig20)
array.push(BLtrig_arr, BLtrig21)
array.push(BLtrig_arr, BLtrig22)
array.push(BLtrig_arr, BLtrig23)
array.push(BLtrig_arr, BLtrig24)
array.push(BLtrig_arr, BLtrig25)
array.push(BLtrig_arr, BLtrig26)
array.push(BLtrig_arr, BLtrig27)
array.push(BLtrig_arr, BLtrig28)
array.push(BLtrig_arr, BLtrig29)
array.push(BLtrig_arr, BLtrig30)
array.push(BLtrig_arr, BLtrig31)
array.push(BLtrig_arr, BLtrig32)
array.push(BLtrig_arr, BLtrig33)
array.push(BLtrig_arr, BLtrig34)
array.push(BLtrig_arr, BLtrig35)


////SLtrig //

array.push(SLtrig_arr, SLtrig01)
array.push(SLtrig_arr, SLtrig02)
array.push(SLtrig_arr, SLtrig03)
array.push(SLtrig_arr, SLtrig04)
array.push(SLtrig_arr, SLtrig05)
array.push(SLtrig_arr, SLtrig06)
array.push(SLtrig_arr, SLtrig07)
array.push(SLtrig_arr, SLtrig08)
array.push(SLtrig_arr, SLtrig09)
array.push(SLtrig_arr, SLtrig10)
array.push(SLtrig_arr, SLtrig11)
array.push(SLtrig_arr, SLtrig12)
array.push(SLtrig_arr, SLtrig13)
array.push(SLtrig_arr, SLtrig14)
array.push(SLtrig_arr, SLtrig15)
array.push(SLtrig_arr, SLtrig16)
array.push(SLtrig_arr, SLtrig17)
array.push(SLtrig_arr, SLtrig18)
array.push(SLtrig_arr, SLtrig19)
array.push(SLtrig_arr, SLtrig20)
array.push(SLtrig_arr, SLtrig21)
array.push(SLtrig_arr, SLtrig22)
array.push(SLtrig_arr, SLtrig23)
array.push(SLtrig_arr, SLtrig24)
array.push(SLtrig_arr, SLtrig25)
array.push(SLtrig_arr, SLtrig26)
array.push(SLtrig_arr, SLtrig27)
array.push(SLtrig_arr, SLtrig28)
array.push(SLtrig_arr, SLtrig29)
array.push(SLtrig_arr, SLtrig30)
array.push(SLtrig_arr, SLtrig31)
array.push(SLtrig_arr, SLtrig32)
array.push(SLtrig_arr, SLtrig33)
array.push(SLtrig_arr, SLtrig34)
array.push(SLtrig_arr, SLtrig35)


/////////
// EMA1 //

array.push(ma1_arr, ma101)
array.push(ma1_arr, ma102)
array.push(ma1_arr, ma103)
array.push(ma1_arr, ma104)
array.push(ma1_arr, ma105)
array.push(ma1_arr, ma106)
array.push(ma1_arr, ma107)
array.push(ma1_arr, ma108)
array.push(ma1_arr, ma109)
array.push(ma1_arr, ma110)
array.push(ma1_arr, ma111)
array.push(ma1_arr, ma112)
array.push(ma1_arr, ma113)
array.push(ma1_arr, ma114)
array.push(ma1_arr, ma115)
array.push(ma1_arr, ma116)
array.push(ma1_arr, ma117)
array.push(ma1_arr, ma118)
array.push(ma1_arr, ma119)
array.push(ma1_arr, ma120)
array.push(ma1_arr, ma121)
array.push(ma1_arr, ma122)
array.push(ma1_arr, ma123)
array.push(ma1_arr, ma124)
array.push(ma1_arr, ma125)
array.push(ma1_arr, ma126)
array.push(ma1_arr, ma127)
array.push(ma1_arr, ma128)
array.push(ma1_arr, ma129)
array.push(ma1_arr, ma130)
array.push(ma1_arr, ma131)
array.push(ma1_arr, ma132)
array.push(ma1_arr, ma133)
array.push(ma1_arr, ma134)
array.push(ma1_arr, ma135)


/////////
// EMA2 //

array.push(ma2_arr, ma201)
array.push(ma2_arr, ma202)
array.push(ma2_arr, ma203)
array.push(ma2_arr, ma204)
array.push(ma2_arr, ma205)
array.push(ma2_arr, ma206)
array.push(ma2_arr, ma207)
array.push(ma2_arr, ma208)
array.push(ma2_arr, ma209)
array.push(ma2_arr, ma210)
array.push(ma2_arr, ma211)
array.push(ma2_arr, ma212)
array.push(ma2_arr, ma213)
array.push(ma2_arr, ma214)
array.push(ma2_arr, ma215)
array.push(ma2_arr, ma216)
array.push(ma2_arr, ma217)
array.push(ma2_arr, ma218)
array.push(ma2_arr, ma219)
array.push(ma2_arr, ma220)
array.push(ma2_arr, ma221)
array.push(ma2_arr, ma222)
array.push(ma2_arr, ma223)
array.push(ma2_arr, ma224)
array.push(ma2_arr, ma225)
array.push(ma2_arr, ma226)
array.push(ma2_arr, ma227)
array.push(ma2_arr, ma228)
array.push(ma2_arr, ma229)
array.push(ma2_arr, ma230)
array.push(ma2_arr, ma231)
array.push(ma2_arr, ma232)
array.push(ma2_arr, ma233)
array.push(ma2_arr, ma234)
array.push(ma2_arr, ma235)


/////////
// EMA3 //

array.push(ma3_arr, ma301)
array.push(ma3_arr, ma302)
array.push(ma3_arr, ma303)
array.push(ma3_arr, ma304)
array.push(ma3_arr, ma305)
array.push(ma3_arr, ma306)
array.push(ma3_arr, ma307)
array.push(ma3_arr, ma308)
array.push(ma3_arr, ma309)
array.push(ma3_arr, ma310)
array.push(ma3_arr, ma311)
array.push(ma3_arr, ma312)
array.push(ma3_arr, ma313)
array.push(ma3_arr, ma314)
array.push(ma3_arr, ma315)
array.push(ma3_arr, ma316)
array.push(ma3_arr, ma317)
array.push(ma3_arr, ma318)
array.push(ma3_arr, ma319)
array.push(ma3_arr, ma320)
array.push(ma3_arr, ma321)
array.push(ma3_arr, ma322)
array.push(ma3_arr, ma323)
array.push(ma3_arr, ma324)
array.push(ma3_arr, ma325)
array.push(ma3_arr, ma326)
array.push(ma3_arr, ma327)
array.push(ma3_arr, ma328)
array.push(ma3_arr, ma329)
array.push(ma3_arr, ma330)
array.push(ma3_arr, ma331)
array.push(ma3_arr, ma332)
array.push(ma3_arr, ma333)
array.push(ma3_arr, ma334)
array.push(ma3_arr, ma335)


/////////
// EMA4 //

array.push(ma4_arr, ma401)
array.push(ma4_arr, ma402)
array.push(ma4_arr, ma403)
array.push(ma4_arr, ma404)
array.push(ma4_arr, ma405)
array.push(ma4_arr, ma406)
array.push(ma4_arr, ma407)
array.push(ma4_arr, ma408)
array.push(ma4_arr, ma409)
array.push(ma4_arr, ma410)
array.push(ma4_arr, ma411)
array.push(ma4_arr, ma412)
array.push(ma4_arr, ma413)
array.push(ma4_arr, ma414)
array.push(ma4_arr, ma415)
array.push(ma4_arr, ma416)
array.push(ma4_arr, ma417)
array.push(ma4_arr, ma418)
array.push(ma4_arr, ma419)
array.push(ma4_arr, ma420)
array.push(ma4_arr, ma421)
array.push(ma4_arr, ma422)
array.push(ma4_arr, ma423)
array.push(ma4_arr, ma424)
array.push(ma4_arr, ma425)
array.push(ma4_arr, ma426)
array.push(ma4_arr, ma427)
array.push(ma4_arr, ma428)
array.push(ma4_arr, ma429)
array.push(ma4_arr, ma430)
array.push(ma4_arr, ma431)
array.push(ma4_arr, ma432)
array.push(ma4_arr, ma433)
array.push(ma4_arr, ma434)
array.push(ma4_arr, ma435)


///////////
// PLOTS //

var tbl = table.new(str.tostring(tbloc), 13, 41, frame_color=#151715, frame_width=1, border_width=1, border_color=color.new(color.white, 100))
var itvl = mtf_val!="" ? mtf_val : timeframe.period

if barstate.islast

    table.cell(tbl, 0, 0, 'Time: '+str.tostring(itvl),     text_halign = text.align_center, bgcolor = color.gray, text_color = color.white, text_size = size.small)
    table.cell(tbl, 1, 0, 'Price',      text_halign = text.align_center, bgcolor = color.gray, text_color = color.white, text_size = size.small)
    table.cell(tbl, 2, 0, 'MACD',        text_halign = text.align_center, bgcolor = color.gray, text_color = color.white, text_size = size.small)
    table.cell(tbl, 3, 0, 'TREND',        text_halign = text.align_center, bgcolor = color.gray, text_color = color.white, text_size = size.small)
    table.cell(tbl, 4, 0, 'EMA1',        text_halign = text.align_center, bgcolor = color.gray, text_color = color.white, text_size = size.small)
    table.cell(tbl, 5, 0, 'EMA2',        text_halign = text.align_center, bgcolor = color.gray, text_color = color.white, text_size = size.small)
    table.cell(tbl, 6, 0, 'EMA3',        text_halign = text.align_center, bgcolor = color.gray, text_color = color.white, text_size = size.small)
    table.cell(tbl, 7, 0, 'EMA4',        text_halign = text.align_center, bgcolor = color.gray, text_color = color.white, text_size = size.small)
    table.cell(tbl, 8, 0, 'EMAL', text_halign = text.align_center, bgcolor = color.gray, text_color = color.white, text_size = size.small)
    table.cell(tbl, 9, 0, 'EMAS', text_halign = text.align_center, bgcolor = color.gray, text_color = color.white, text_size = size.small)
    table.cell(tbl, 10, 0, 'BBSIGNAL',        text_halign = text.align_center, bgcolor = color.gray, text_color = color.white, text_size = size.small)
    table.cell(tbl, 11, 0, 'Trigger', text_halign = text.align_center, bgcolor = color.gray, text_color = color.white, text_size = size.small)


    for i = 0 to 34

        if array.get(u_arr, i)
        
            macd_txt = array.get(macd_b_arr, i) == bool(true) ? "S" : "B"
            macd_col = array.get(macd_b_arr, i) == bool(true) ? color.red : color.green

            trend_up_col  = array.get(trend_up_arr, i) == bool(true) ? color.green : color.red 
            trend_up_txt  = array.get(trend_up_arr, i) == bool(true) ? "Up" : "Down" 
            sup_text = "Wait"
            sup_col = #aaaaaa
            if array.get(sup_arr, i) == 1
                sup_text := array.get(sup_arr, i) == 1 ? "Long"      : "Wait"
                sup_col  := array.get(sup_arr, i) == 1  ? color.green : #aaaaaa
            if array.get(sup_arr, i) == 2
                sup_text := array.get(sup_arr, i) == 2 ? "Short"      : "Wait"
                sup_col  := array.get(sup_arr, i) == 2 ? color.red : #aaaaaa
            //if array.get(sup_arr, i) == 3
                //sup_text = array.get(sup_arr, i) == 3 ? "Wait"      : "Wait"
                //sup_col  = array.get(sup_arr, i) == bool(true)  ? #aaaaaa : #aaaaaa
 
            signal_text = array.get(signal_arr, i) == bool(true) ? "B"      : "S"
            signal_col = array.get(signal_arr, i) == bool(true) ? color.green : color.red

            BLtrig_text = array.get(BLtrig_arr, i) == bool(true) ? "B"      : "Wait"
			BLtrig_col  = array.get(BLtrig_arr, i) == bool(true) ? color.green : #aaaaaa
			BLtrig_bool = array.get(BLtrig_arr, i) == bool(true)

            SLtrig_text = array.get(SLtrig_arr, i) == bool(true) ? "S"      : "Wait"
            SLtrig_col  = array.get(SLtrig_arr, i) == bool(true) ? color.orange : #aaaaaa


            ma1_col  = array.get(ma1_arr, i) > array.get(ma2_arr, i) ? color.green : #DEE7CD
            ma2_col  = array.get(ma2_arr, i) > array.get(ma3_arr, i) ? color.green : #DEE7CD
            ma3_col  = array.get(ma3_arr, i) < array.get(ma2_arr, i) ? color.green : #DEE7CD
            ma4_col  = array.get(ma4_arr, i) < array.get(ma3_arr, i) ? color.green : #DEE7CD
            
            /// wite to table  ///
            table.cell(tbl, 0, i + 1, array.get(s_arr, i),                                 	text_halign = text.align_left,   bgcolor = color.gray, text_color = color.white, text_size = size.small)
            table.cell(tbl, 1, i + 1, str.tostring(array.get(cl_arr, i)),                  	text_halign = text.align_center, bgcolor = #aaaaaa,    text_color = color.white, text_size = size.small)
            table.cell(tbl, 2, i + 1, macd_txt,         	                                text_halign = text.align_center, bgcolor = macd_col,    text_color = color.white, text_size = size.small)
            table.cell(tbl, 3, i + 1, trend_up_txt,         	                                text_halign = text.align_center, bgcolor = trend_up_col,    text_color = color.white, text_size = size.small)
            table.cell(tbl, 4, i + 1, str.tostring(array.get(ma1_arr, i), "#.##"),         	text_halign = text.align_center, bgcolor = ma1_col   , text_color = #242424, text_size = size.small)
            table.cell(tbl, 5, i + 1, str.tostring(array.get(ma2_arr, i), "#.##"),         	text_halign = text.align_center, bgcolor = ma2_col   , text_color = #242424, text_size = size.small)
            table.cell(tbl, 6, i + 1, str.tostring(array.get(ma3_arr, i), "#.##"),         	text_halign = text.align_center, bgcolor = ma3_col   , text_color = #242424, text_size = size.small)
            table.cell(tbl, 7, i + 1, str.tostring(array.get(ma4_arr, i), "#.##"),         	text_halign = text.align_center, bgcolor = ma4_col   , text_color = #242424, text_size = size.small)
			table.cell(tbl, 8, i + 1, BLtrig_text,                						   	text_halign = text.align_center, bgcolor = BLtrig_col,    text_color = color.white, text_size = size.small)
			table.cell(tbl, 9, i + 1, SLtrig_text,                							text_halign = text.align_center, bgcolor = SLtrig_col,    text_color = color.white, text_size = size.small)
            table.cell(tbl, 10, i + 1, signal_text,         	text_halign = text.align_center, bgcolor = signal_col,    text_color = color.black, text_size = size.small)
            table.cell(tbl, 11, i + 1, sup_text,                                            text_halign = text.align_center, bgcolor = sup_col,    text_color = color.white, text_size = size.small)

			//ALARM 
			alarm=input(true, title="ALARM SETTING")
			//alertbl=input(defval=70, title="Overbought")
			if array.get(sup_arr, i) == 1 //and alarm
				alert("Long " +str.tostring(array.get(s_arr, i)) + " TimeFrame: " + str.tostring(timeframe.period) +  " Price: " + str.tostring(array.get(cl_arr, i)), alert.freq_once_per_bar_close)

			if array.get(sup_arr, i) == 2 //and alarm
				alert("Short " +str.tostring(array.get(s_arr, i)) + " TimeFrame: " + str.tostring(timeframe.period) +  " Price: " + str.tostring(array.get(cl_arr, i)), alert.freq_once_per_bar_close)

				
		
